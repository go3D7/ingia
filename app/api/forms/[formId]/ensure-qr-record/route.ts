```typescript
// app/api/forms/[formId]/ensure-qr-record/route.ts
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';
import { cookies } from 'next/headers';
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { Database } from '@/lib/database.types';

export async function POST(
  request: NextRequest,
  { params }: { params: { formId: string } }
) {
  const supabase = createRouteHandlerClient<Database>({ cookies });
  const { formId } = params;

  if (!formId) {
    return NextResponse.json({ error: 'Form ID is required' }, { status: 400 });
  }

  try {
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();

    if (sessionError || !session) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    const userId = session.user.id;

    // 1. Verify the form exists and belongs to the user's premise
    const { data: formData, error: formError } = await supabase
      .from('forms')
      .select(`
        id,
        premise_id,
        premises (
          owner_id
        )
      `)
      .eq('id', formId)
      .single();

    if (formError || !formData) {
      console.error('Error fetching form or form not found:', formError);
      return NextResponse.json({ error: 'Form not found or error fetching form.' }, { status: 404 });
    }

    if (formData.premises?.owner_id !== userId) {
      return NextResponse.json({ error: 'Forbidden: You do not own this form.' }, { status: 403 });
    }

    // 2. Check for an existing active QR code for this form
    const { data: existingQrCode, error: qrError } = await supabase
      .from('qrcodes')
      .select('qr_identifier')
      .eq('form_id', formId)
      .eq('is_active', true)
      .maybeSingle(); // Use maybeSingle to handle no rows found gracefully

    if (qrError && qrError.code !== 'PGRST116') { // PGRST116 means no rows found
      console.error('Error checking for existing QR code:', qrError);
      return NextResponse.json({ error: 'Error checking for existing QR code.' }, { status: 500 });
    }

    if (existingQrCode) {
      return NextResponse.json({ qr_identifier: existingQrCode.qr_identifier });
    }

    // 3. If no active QR code, generate a new one and insert it
    // The qr_identifier will be generated by the database default uuid_generate_v4()
    // if not provided, so we let the database handle it.
    const { data: newQrCode, error: insertError } = await supabase
      .from('qrcodes')
      .insert({
        form_id: formId,
        premise_id: formData.premise_id, // Use premise_id from the fetched form
        is_active: true,
        version: 1 // Assuming first version
      })
      .select('qr_identifier')
      .single();

    if (insertError) {
      console.error('Error creating new QR code:', insertError);
      return NextResponse.json({ error: `Failed to create QR code: ${insertError.message}` }, { status: 500 });
    }

    if (!newQrCode) {
      return NextResponse.json({ error: 'Failed to retrieve new QR code after creation.' }, { status: 500 });
    }

    return NextResponse.json({ qr_identifier: newQrCode.qr_identifier });

  } catch (error) {
    console.error('Unexpected error in /api/forms/[formId]/ensure-qr-record:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}
```
